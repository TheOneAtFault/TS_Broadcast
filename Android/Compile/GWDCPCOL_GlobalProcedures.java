/**
 * Code generated by WINDEV Mobile - DO NOT MODIFY!
 * WINDEV Mobile object: Collection
 * Android class: COL_GlobalProcedures
 * Date: 26/11/2019 14:30:05
 * Version of wdjava64.dll: 24.0.254.7
 */


package com.mycompany.ts_broadcast.wdgen;


import com.mycompany.ts_broadcast.*;
import fr.pcsoft.wdjava.core.types.*;
import fr.pcsoft.wdjava.core.*;
import fr.pcsoft.wdjava.core.application.*;
import fr.pcsoft.wdjava.api.*;
/*Imports trouvés dans le code WL*/
import com.touchsides.touchnfc2.ULCard;
import com.touchsides.touchnfc2.TransactionCardProfile;
import com.touchsides.touchnfc2.ShopperCardProfile;
import com.touchsides.touchnfc2.OnCardDetected;
import com.touchsides.touchnfc2.Models.CardInfo;
import com.touchsides.touchnfc2.Models.CardDetails;
import com.touchsides.touchnfc2.LightProfile;
import com.touchsides.touchnfc2.Enums.EnumTitle;
import com.touchsides.touchnfc2.Enums.EnumGender;
import com.touchsides.touchnfc2.Enums.CardState;
import com.touchsides.touchnfc2.Enums.CardRole;
import com.touchsides.touchnfc2.CardStructure;
import com.touchsides.touchnfc2.CardSerialParser;
import com.touchsides.touchnfc2.CardNumberDetails;
import static com.touchsides.touchnfc2.CardProperties.isValidShopper;
import static com.touchsides.touchnfc2.CardProperties.isValidCashier;
import static com.touchsides.touchnfc2.CardProperties.isShopperCard;
import static com.touchsides.touchnfc2.CardProperties.isCashierCard;
import static com.touchsides.touchnfc2.CardProperties.isCardActive;
import static com.touchsides.touchnfc2.CardProperties.cardInfo;
import android.widget.Toast;
import android.util.Log;
import android.os.Bundle;
import android.nfc.NfcAdapter.ReaderCallback;
import android.nfc.Tag;
import android.nfc.NfcAdapter;
import android.widget.Toast;
import android.app.Activity;
import android.support.annotation.Nullable;
import android.content.ActivityNotFoundException;
import android.content.Intent;
import android.content.Context;
import android.content.ComponentName;
import android.content.IntentFilter;
import android.content.Intent;
import android.content.Context;
import android.content.BroadcastReceiver;
import android.widget.Toast;
import android.app.Activity;
import android.support.annotation.Nullable;
import android.content.ActivityNotFoundException;
import android.content.Intent;
import android.content.Context;
import android.content.ComponentName;
/*Fin Imports trouvés dans le code WL*/



class GWDCPCOL_GlobalProcedures extends WDCollProcAndroid
{

public WDProjet getProjet()
{
return GWDPTS_Broadcast.getInstance();
}

public IWDEnsembleElement getEnsemble()
{
return GWDPTS_Broadcast.getInstance();
}

protected String getNomCollection()
{
return "COL_GlobalProcedures";
}
private final static GWDCPCOL_GlobalProcedures ms_instance = new GWDCPCOL_GlobalProcedures();
public final static GWDCPCOL_GlobalProcedures getInstance()
{
return ms_instance;
}

// Code de déclaration de COL_GlobalProcedures
static public void init()
{
ms_instance.initDeclarationCollection();

try
{
}
finally
{
finDeclarationCollection();
}

}




// Code de terminaison de COL_GlobalProcedures
static public void term()
{
ms_instance.initTerminaisonCollection();

try
{
}
finally
{
finTerminaisonCollection();
}

}



// Nombre de Procédures : 7

public static void ShopperCreate()
{
	boolean temp = false;
	Context context = getApplicationContext();
	Intent intent = new Intent();
	ComponentName cn = new ComponentName("com.touchsides.touchprovider","touchsides.com.registrations.RegisterUserActivity");
	
	intent.putExtra("Role", "Shopper");
	intent.putExtra("ByPassAuth", true);	
	intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
	
	try {
		intent.setComponent(cn);
		context.startActivity(intent);
	} catch (ActivityNotFoundException e) {
		cn = new ComponentName("com.touchsides.touchprovider.debug","touchsides.com.registrations.RegisterUserActivity");
		intent.setComponent(cn);
		context.startActivity(intent);
	} catch(Exception e){
		temp = callWLProcedure_boolean("NotifyUI","An error occured while creating the user.");
	}
}

public static boolean FindBroadCastReceiver()
{
	try{
		Context myContext = getApplicationContext();
		
		IntentFilter filter = new IntentFilter("touchsidesOdysseyAction");
		
		getCurrentActivity().registerReceiver(findShopper, filter);  
		//Toast.makeText(myContext, "Casting", Toast.LENGTH_SHORT).show();
		return true;
	}catch(IllegalArgumentException e){
	 	return false;
	}	   
}

static BroadcastReceiver findShopper = new BroadcastReceiver(){
	
	public void onReceive(Context context, Intent intent){
		Context myContext = getApplicationContext();
		if(intent.hasExtra("isBlackListed") && intent.hasExtra("blackListedReason") && intent.hasExtra("isNotLinkedToStore")){
			
			boolean isBlackListed = intent.getBooleanExtra("isBlackListed", false);
			String blackListedReason = intent.getStringExtra ("blackListedReason");
			boolean isNotLinkedToStore = intent.getBooleanExtra("isNotLinkedToStore",false);
			String shopperName = intent.getStringExtra("name");
			String shopperSurname = intent.getStringExtra("surname");
			String shopperGuid = intent.getStringExtra("guid");
			int shopperCashback = intent.getIntExtra("cashback",0);
			
			//set
			boolean result = false;
			result = callWLProcedure_boolean("SetShopperFull", shopperName, shopperSurname, shopperGuid, shopperCashback, isBlackListed, blackListedReason, isNotLinkedToStore);
		}
		else{
			String shopperName = intent.getStringExtra("name");
			String shopperSurname = intent.getStringExtra("surname");
			String shopperGuid = intent.getStringExtra("guid");
			int shopperCashback = intent.getIntExtra("cashback",0);
			
			//set
			boolean result = false;
			result = callWLProcedure_boolean("SetShopperSummary", shopperName, shopperSurname, shopperGuid, shopperCashback);
		}
	}
};

public static void ShopperFind()
{
	//Get the required context
	Activity leActivity = getCurrentActivity();
	Context leContext = getApplicationContext();
	//implement findshopper and call find()
	FindShopperClass findShopper = new FindShopperClass();
	findShopper.find( );
}

public static class FindShopperClass extends Activity {	
	public void find()
	{		
		Activity activityContext = getCurrentActivity();
		try{
			Intent i = new Intent();
			ComponentName cn = new ComponentName("com.touchsides.touchprovider", "com.touchsides.till.shopper.FindShopperActivity");
			i.putExtra("ByPassAuth", true);
			i.setComponent(cn);
			activityContext.startActivityForResult(i, 10);		
		} catch(ActivityNotFoundException e) {
			Intent i = new Intent();
			ComponentName cn = new ComponentName("com.touchsides.touchprovider.debug", "com.touchsides.till.shopper.FindShopperActivity");
			i.setComponent(cn);
			i.putExtra("ByPassAuth", true);
			activityContext.startActivityForResult(i, 10);					
		}
	}
	
	@Override
	public void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
		super.onActivityResult(requestCode, resultCode, data);		
	}
}
static public WDObjet fWD_setShopperSummary( WDObjet vWD_sName , WDObjet vWD_sSurname , WDObjet vWD_sGuid , WDObjet vWD_nCashback )
{
ms_instance.initExecProcGlobale("SetShopperSummary");

try
{
vWD_sName = WDParametre.traiterParametre(vWD_sName, 1, false, 16);

vWD_sSurname = WDParametre.traiterParametre(vWD_sSurname, 2, false, 16);

vWD_sGuid = WDParametre.traiterParametre(vWD_sGuid, 3, false, 16);

vWD_nCashback = WDParametre.traiterParametre(vWD_nCashback, 4, false, 8);


// IF WinStatus(WIN_Broadcasts) = Active THEN	
if(WDAPIFenetre.fenEtat(GWDPTS_Broadcast.getInstance().mWD_WIN_Broadcasts).opEgal(0))
{
// 	IF NOT sGuid = "00000000-0000-0000-0000-000000000000" THEN
if((!vWD_sGuid.opEgal("00000000-0000-0000-0000-000000000000")))
{
// 		WIN_Broadcasts.STC_Result = "Shopper Name: " + sName + Charact(10) + 
GWDPTS_Broadcast.getInstance().getWIN_Broadcasts().mWD_STC_Result.setValeur(new WDChaineU("Shopper Name: ").opPlus(vWD_sName).opPlus(WDAPIChaine.caract(10)).opPlus("Shopper Surname: ").opPlus(vWD_sSurname).opPlus(WDAPIChaine.caract(10)).opPlus("Shopper Guid: ").opPlus(vWD_sGuid).opPlus(WDAPIChaine.caract(10)).opPlus("Shopper Cashback: ").opPlus(vWD_nCashback));

}
else
{
// 		WIN_Broadcasts.STC_Result = "No user found."
GWDPTS_Broadcast.getInstance().getWIN_Broadcasts().mWD_STC_Result.setValeur("No user found.");

}

}

// RESULT False
return new WDBooleen(false);

}
finally
{
finExecProcGlobale();
}

}


static public WDObjet fWD_notifyUI( WDObjet vWD_sMessage )
{
ms_instance.initExecProcGlobale("NotifyUI");

try
{
vWD_sMessage = WDParametre.traiterParametre(vWD_sMessage, 1, false, 16);


// Info(sMessage)
WDAPIDialogue.info(vWD_sMessage.getString());

// RESULT False
return new WDBooleen(false);

}
finally
{
finExecProcGlobale();
}

}



//lib imports


private static OnCardDetected onCardDetected;
private static CardDetails cardDetails;
private static ShopperCardProfile shopperCardProfile;
private static TransactionCardProfile transactionCardProfile;
static ULCard ulCard;

public static void ReadNFCCard()
{
	final Context context = getApplicationContext();
	final Activity activity = getCurrentActivity();
	
	NfcAdapter adapter = NfcAdapter.getDefaultAdapter(context);
	
	ReaderCallback callback = new ReaderCallback () {
		@Override
		public void onTagDiscovered (final Tag tag) {
			activity.runOnUiThread(new Runnable() {
				@Override
				public void run(){
					try{
						onCardDetected = new OnCardDetected();
						ulCard = onCardDetected.getUlCard(tag, false);
						cardDetails = new CardDetails(ulCard);
						shopperCardProfile = cardDetails.getShopperCardProfile();
						transactionCardProfile = cardDetails.getTransactionCardProfile();
						
						Boolean isValidShopperCard = isValidShopper(isCardActive(shopperCardProfile), isShopperCard(shopperCardProfile));
						Boolean isValidCashierCard = isValidCashier(isCardActive(shopperCardProfile), isCashierCard(shopperCardProfile));
						CardInfo cardInfo = cardInfo(shopperCardProfile.getCardRole(), cardDetails, shopperCardProfile.getMobile(), shopperCardProfile.getStoreID());
												
						if (isValidShopperCard || isValidCashierCard)
						{
							ComponentName compName = new ComponentName("com.touchsides.touchprovider", "com.touchsides.checkout.checkout.basket.BasketActivity");
							Intent curIntent = new Intent();
							curIntent.putExtra("Role", cardInfo.getCardRole());
							curIntent.putExtra("ByPassAuth", cardInfo.getByPassAuth());
							curIntent.putExtra("CardSerial", cardInfo.getCardSerial());
							curIntent.putExtra("MobileNumber", cardInfo.getMobileNumber());
							curIntent.putExtra("StoreID", cardInfo.getStoreID());
							
							try
							{
								curIntent.setComponent(compName);
								activity.startActivity(curIntent);
							}
							catch (ActivityNotFoundException ex)
							{
								compName = new ComponentName("com.touchsides.touchprovider.debug", "com.touchsides.checkout.checkout.basket.BasketActivity");
								curIntent.setComponent(compName);
								activity.startActivityForResult(curIntent, 1242);
							}
						}
						
					} catch(Exception e) {
						Log.d("ReadNFCCard", "Error on card read");
					}
				}
			});
		}
	};
	
	adapter.enableReaderMode(getCurrentActivity(), callback, NfcAdapter.FLAG_READER_NFC_A, null);
}
static public WDObjet fWD_setShopperFull( WDObjet vWD_sName , WDObjet vWD_sSurname , WDObjet vWD_sGuid , WDObjet vWD_nCashback , WDObjet vWD_isBlackListed , WDObjet vWD_blackListedReason , WDObjet vWD_isNotLinkedToStore )
{
ms_instance.initExecProcGlobale("SetShopperFull");

try
{
vWD_sName = WDParametre.traiterParametre(vWD_sName, 1, false, 16);

vWD_sSurname = WDParametre.traiterParametre(vWD_sSurname, 2, false, 16);

vWD_sGuid = WDParametre.traiterParametre(vWD_sGuid, 3, false, 16);

vWD_nCashback = WDParametre.traiterParametre(vWD_nCashback, 4, false, 8);

vWD_isBlackListed = WDParametre.traiterParametre(vWD_isBlackListed, 5, false, 1);

vWD_blackListedReason = WDParametre.traiterParametre(vWD_blackListedReason, 6, false, 16);

vWD_isNotLinkedToStore = WDParametre.traiterParametre(vWD_isNotLinkedToStore, 7, false, 1);


// IF WinStatus(WIN_NFC) = Active THEN
if(WDAPIFenetre.fenEtat(GWDPTS_Broadcast.getInstance().mWD_WIN_NFC).opEgal(0))
{
// 	IF NOT sGuid = "00000000-0000-0000-0000-000000000000" THEN
if((!vWD_sGuid.opEgal("00000000-0000-0000-0000-000000000000")))
{
// 		WIN_NFC.STC_CardDetails = "Shopper Name: " + sName + Charact(10) + 
GWDPTS_Broadcast.getInstance().getWIN_NFC().mWD_STC_CardDetails.setValeur(new WDChaineU("Shopper Name: ").opPlus(vWD_sName).opPlus(WDAPIChaine.caract(10)).opPlus("Shopper Surname: ").opPlus(vWD_sSurname).opPlus(WDAPIChaine.caract(10)).opPlus("Shopper Guid: ").opPlus(vWD_sGuid).opPlus(WDAPIChaine.caract(10)).opPlus("Shopper Cashback: ").opPlus(vWD_nCashback).opPlus(WDAPIChaine.caract(10)).opPlus("is blacklisted: ").opPlus(vWD_isBlackListed).opPlus(WDAPIChaine.caract(10)).opPlus("blacklist reason: ").opPlus(vWD_blackListedReason).opPlus(WDAPIChaine.caract(10)).opPlus("not linked to store: ").opPlus(vWD_isNotLinkedToStore));

}
else
{
// 		WIN_NFC.STC_CardDetails = "No user found."
GWDPTS_Broadcast.getInstance().getWIN_NFC().mWD_STC_CardDetails.setValeur("No user found.");

}

}

// RESULT False
return new WDBooleen(false);

}
finally
{
finExecProcGlobale();
}

}



////////////////////////////////////////////////////////////////////////////
// Déclaration des variables globales
////////////////////////////////////////////////////////////////////////////
}
