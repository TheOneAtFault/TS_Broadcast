/**
 * Code generated by WINDEV Mobile - DO NOT MODIFY!
 * WINDEV Mobile object: Collection
 * Android class: COL_GlobalProcedures
 * Date: 28/11/2019 14:17:36
 * Version of wdjava64.dll: 24.0.254.7
 */


package com.mycompany.ts_broadcast.wdgen;


import com.mycompany.ts_broadcast.*;
import fr.pcsoft.wdjava.core.types.*;
import fr.pcsoft.wdjava.core.*;
import fr.pcsoft.wdjava.core.application.*;
import fr.pcsoft.wdjava.api.*;
import fr.pcsoft.wdjava.core.types.collection.tableau.*;
/*Imports trouvés dans le code WL*/
import java.util.List;
import java.util.ArrayList;
import android.util.Log;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import android.widget.Toast;
import com.touchsides.touchsidesintentserviceapi.TouchsidesIntentServiceAPI;
import android.content.Context;
import com.touchsides.touchnfc2.ULCard;
import com.touchsides.touchnfc2.TransactionCardProfile;
import com.touchsides.touchnfc2.ShopperCardProfile;
import com.touchsides.touchnfc2.OnCardDetected;
import com.touchsides.touchnfc2.Models.CardInfo;
import com.touchsides.touchnfc2.Models.CardDetails;
import com.touchsides.touchnfc2.LightProfile;
import com.touchsides.touchnfc2.Enums.EnumTitle;
import com.touchsides.touchnfc2.Enums.EnumGender;
import com.touchsides.touchnfc2.Enums.CardState;
import com.touchsides.touchnfc2.Enums.CardRole;
import com.touchsides.touchnfc2.CardStructure;
import com.touchsides.touchnfc2.CardSerialParser;
import com.touchsides.touchnfc2.CardNumberDetails;
import static com.touchsides.touchnfc2.CardProperties.isValidShopper;
import static com.touchsides.touchnfc2.CardProperties.isValidCashier;
import static com.touchsides.touchnfc2.CardProperties.isShopperCard;
import static com.touchsides.touchnfc2.CardProperties.isCashierCard;
import static com.touchsides.touchnfc2.CardProperties.isCardActive;
import static com.touchsides.touchnfc2.CardProperties.cardInfo;
import android.content.Intent;
import android.content.ActivityNotFoundException;
import android.app.Activity;
import android.content.ComponentName;
import android.widget.Toast;
import android.util.Log;
import android.os.Bundle;
import android.nfc.NfcAdapter.ReaderCallback;
import android.nfc.Tag;
import android.nfc.NfcAdapter;
import com.touchsides.touchsidesintentserviceapi.TouchsidesIntentServiceAPI;
import android.content.Context;
import android.content.IntentFilter;
import android.content.Intent;
import android.content.Context;
import android.content.BroadcastReceiver;
import com.touchsides.touchsidesintentserviceapi.TouchsidesIntentServiceAPI;
import android.content.Context;
/*Fin Imports trouvés dans le code WL*/



class GWDCPCOL_GlobalProcedures extends WDCollProcAndroid
{

public WDProjet getProjet()
{
return GWDPTS_Broadcast.getInstance();
}

public IWDEnsembleElement getEnsemble()
{
return GWDPTS_Broadcast.getInstance();
}

protected String getNomCollection()
{
return "COL_GlobalProcedures";
}
private final static GWDCPCOL_GlobalProcedures ms_instance = new GWDCPCOL_GlobalProcedures();
public final static GWDCPCOL_GlobalProcedures getInstance()
{
return ms_instance;
}

// Code de déclaration de COL_GlobalProcedures
static public void init()
{
ms_instance.initDeclarationCollection();

try
{
}
finally
{
finDeclarationCollection();
}

}




// Code de terminaison de COL_GlobalProcedures
static public void term()
{
ms_instance.initTerminaisonCollection();

try
{
}
finally
{
finTerminaisonCollection();
}

}



// Nombre de Procédures : 9
//import android.content.ComponentName;
//import android.content.Intent;
//import android.content.ActivityNotFoundException;
//import android.support.annotation.Nullable;
//import android.app.Activity;
//import android.widget.Toast;

public static boolean ShopperCreate()
{
	boolean response = false;
	Context context = getApplicationContext();
	try {
		response = TouchsidesIntentServiceAPI.registerShopper(context);
	} catch(Exception e){
		Log.d("ReadNFCCard", "An error occurred while creating the user.");
		response = false;
	}
	return response;
}

public static boolean FindBroadCastReceiver()
{
	try{
		Context myContext = getApplicationContext();
		
		IntentFilter filter = new IntentFilter("touchsidesOdysseyAction");		
		getCurrentActivity().registerReceiver(findShopper, filter);  
		return true;
	}catch(IllegalArgumentException e){
	 	return false;
	}	   
}

static BroadcastReceiver findShopper = new BroadcastReceiver(){	
	public void onReceive(Context context, Intent intent){
		try {
			Context myContext = getApplicationContext();
			if(intent.hasExtra("isBlackListed") && intent.hasExtra("blackListedReason") && intent.hasExtra("isNotLinkedToStore")){ //shopper info on basket intent
				
				boolean isBlackListed = intent.getBooleanExtra("isBlackListed", false);
				String blackListedReason = intent.getStringExtra ("blackListedReason");
				boolean isNotLinkedToStore = intent.getBooleanExtra("isNotLinkedToStore",false);
				String shopperName = intent.getStringExtra("name");
				String shopperSurname = intent.getStringExtra("surname");
				String shopperGuid = intent.getStringExtra("guid");
				int shopperCashback = intent.getIntExtra("cashback",0);
				
				boolean result = false;
				result = callWLProcedure_boolean("SetShopperFull", shopperName, shopperSurname, shopperGuid, shopperCashback, isBlackListed, blackListedReason, isNotLinkedToStore);
			}
			else if(intent.hasExtra("name") && intent.hasExtra("cashback")){ //shopper create or find intent
				String shopperName = intent.getStringExtra("name");
				String shopperSurname = intent.getStringExtra("surname");
				String shopperGuid = intent.getStringExtra("guid");
				int shopperCashback = intent.getIntExtra("cashback",0);
				
				boolean result = false;
				result = callWLProcedure_boolean("SetShopperSummary", shopperName, shopperSurname, shopperGuid, shopperCashback);
			}
			else if(intent.hasExtra("checkPromotionsResult")){ //checkPromotion intent
				boolean hasRewards = intent.getBooleanExtra("rewards", false);
				int totalDiscount = intent.getIntExtra("totalDiscount", 0);
				int totalAirtime = intent.getIntExtra("totalAirrime", 0);
				int totalData = intent.getIntExtra("totalData", 0);
				int totalCashback = intent.getIntExtra("totalCashback", 0);
				int totalBetway = intent.getIntExtra("totalBetway", 0);				
				String[] freeBarcodes = intent.getStringArrayExtra("freeBarcodes");
				String[] reminderMessages = intent.getStringArrayExtra("reminderMessages");
				
				boolean result = false;
				result = callWLProcedure_boolean("CheckPromotionResult", hasRewards, totalDiscount, totalAirtime, totalData, totalCashback, totalBetway, freeBarcodes, reminderMessages);
			}
		}catch(Exception e){
			Log.d("Broadcast on receive", "Error in broadcast receive");
		}
	}
};

public static boolean ShopperFind()
{
	boolean response = false;
	Context context = getApplicationContext();
	try {
		response = TouchsidesIntentServiceAPI.findShopper(context);
	} catch(Exception e){
		Log.d("ReadNFCCard", "An error occurred while searching for the shopper.");
		response = false;
	}
	return response;
}
static public WDObjet fWD_setShopperSummary( WDObjet vWD_sName , WDObjet vWD_sSurname , WDObjet vWD_sGuid , WDObjet vWD_nCashback )
{
ms_instance.initExecProcGlobale("SetShopperSummary");

try
{
vWD_sName = WDParametre.traiterParametre(vWD_sName, 1, false, 16);

vWD_sSurname = WDParametre.traiterParametre(vWD_sSurname, 2, false, 16);

vWD_sGuid = WDParametre.traiterParametre(vWD_sGuid, 3, false, 16);

vWD_nCashback = WDParametre.traiterParametre(vWD_nCashback, 4, false, 8);


// if WinStatus(WIN_Broadcasts) = Active then	
if(WDAPIFenetre.fenEtat(GWDPTS_Broadcast.getInstance().mWD_WIN_Broadcasts).opEgal(0))
{
// 	IF NOT sGuid = "00000000-0000-0000-0000-000000000000" THEN
if((!vWD_sGuid.opEgal("00000000-0000-0000-0000-000000000000")))
{
// 		WIN_Broadcasts.STC_Result = "Shopper Name: " + sName + Charact(10) + 
GWDPTS_Broadcast.getInstance().getWIN_Broadcasts().mWD_STC_Result.setValeur(new WDChaineU("Shopper Name: ").opPlus(vWD_sName).opPlus(WDAPIChaine.caract(10)).opPlus("Shopper Surname: ").opPlus(vWD_sSurname).opPlus(WDAPIChaine.caract(10)).opPlus("Shopper Guid: ").opPlus(vWD_sGuid).opPlus(WDAPIChaine.caract(10)).opPlus("Shopper Cashback: ").opPlus(vWD_nCashback));

}
else
{
// 		WIN_Broadcasts.STC_Result = "No user found."
GWDPTS_Broadcast.getInstance().getWIN_Broadcasts().mWD_STC_Result.setValeur("No user found.");

}

}

// result false
return new WDBooleen(false);

}
finally
{
finExecProcGlobale();
}

}


static public WDObjet fWD_notifyUI( WDObjet vWD_sMessage )
{
ms_instance.initExecProcGlobale("NotifyUI");

try
{
vWD_sMessage = WDParametre.traiterParametre(vWD_sMessage, 1, false, 16);


// Info(sMessage)
WDAPIDialogue.info(vWD_sMessage.getString());

// result false
return new WDBooleen(false);

}
finally
{
finExecProcGlobale();
}

}



//lib imports


private static OnCardDetected onCardDetected;
private static CardDetails cardDetails;
private static ShopperCardProfile shopperCardProfile;
private static TransactionCardProfile transactionCardProfile;
static ULCard ulCard;

public static void ReadNFCCard()
{
	final Context context = getApplicationContext();
	final Activity activity = getCurrentActivity();
	
	NfcAdapter adapter = NfcAdapter.getDefaultAdapter(context);
	
	ReaderCallback callback = new ReaderCallback () {
		@Override
		public void onTagDiscovered (final Tag tag) {
			activity.runOnUiThread(new Runnable() {
				@Override
				public void run(){
					try{
						onCardDetected = new OnCardDetected();
						ulCard = onCardDetected.getUlCard(tag, false);
						cardDetails = new CardDetails(ulCard);
						shopperCardProfile = cardDetails.getShopperCardProfile();
						transactionCardProfile = cardDetails.getTransactionCardProfile();
						
						Boolean isValidShopperCard = isValidShopper(isCardActive(shopperCardProfile), isShopperCard(shopperCardProfile));
						Boolean isValidCashierCard = isValidCashier(isCardActive(shopperCardProfile), isCashierCard(shopperCardProfile));
						CardInfo cardInfo = cardInfo(shopperCardProfile.getCardRole(), cardDetails, shopperCardProfile.getMobile(), shopperCardProfile.getStoreID());
												
						if (isValidShopperCard || isValidCashierCard)
						{
							ComponentName compName = new ComponentName("com.touchsides.touchprovider", "com.touchsides.checkout.checkout.basket.BasketActivity");
							Intent curIntent = new Intent();
							curIntent.putExtra("Role", cardInfo.getCardRole());
							curIntent.putExtra("ByPassAuth", cardInfo.getByPassAuth());
							curIntent.putExtra("CardSerial", cardInfo.getCardSerial());
							curIntent.putExtra("MobileNumber", cardInfo.getMobileNumber());
							curIntent.putExtra("StoreID", cardInfo.getStoreID());							
							try
							{
								curIntent.setComponent(compName);
								activity.startActivity(curIntent);
							}
							catch (ActivityNotFoundException ex)
							{
								compName = new ComponentName("com.touchsides.touchprovider.debug", "com.touchsides.checkout.checkout.basket.BasketActivity");
								curIntent.setComponent(compName);
								activity.startActivityForResult(curIntent, 1242);
							}
						}						
					} catch(Exception e) {
						Log.d("ReadNFCCard", "Error on card read");
					}
				}
			});
		}
	};
	
	adapter.enableReaderMode(getCurrentActivity(), callback, NfcAdapter.FLAG_READER_NFC_A, null);
}
static public WDObjet fWD_setShopperFull( WDObjet vWD_sName , WDObjet vWD_sSurname , WDObjet vWD_sGuid , WDObjet vWD_nCashback , WDObjet vWD_isBlackListed , WDObjet vWD_blackListedReason , WDObjet vWD_isNotLinkedToStore )
{
ms_instance.initExecProcGlobale("SetShopperFull");

try
{
vWD_sName = WDParametre.traiterParametre(vWD_sName, 1, false, 16);

vWD_sSurname = WDParametre.traiterParametre(vWD_sSurname, 2, false, 16);

vWD_sGuid = WDParametre.traiterParametre(vWD_sGuid, 3, false, 16);

vWD_nCashback = WDParametre.traiterParametre(vWD_nCashback, 4, false, 8);

vWD_isBlackListed = WDParametre.traiterParametre(vWD_isBlackListed, 5, false, 1);

vWD_blackListedReason = WDParametre.traiterParametre(vWD_blackListedReason, 6, false, 16);

vWD_isNotLinkedToStore = WDParametre.traiterParametre(vWD_isNotLinkedToStore, 7, false, 1);


// IF WinStatus(WIN_NFC) = Active THEN
if(WDAPIFenetre.fenEtat(GWDPTS_Broadcast.getInstance().mWD_WIN_NFC).opEgal(0))
{
// 	if not sGuid = "00000000-0000-0000-0000-000000000000" then
if((!vWD_sGuid.opEgal("00000000-0000-0000-0000-000000000000")))
{
// 		WIN_NFC.STC_CardDetails = "Shopper Name: " + sName + Charact(10) + 
GWDPTS_Broadcast.getInstance().getWIN_NFC().mWD_STC_CardDetails.setValeur(new WDChaineU("Shopper Name: ").opPlus(vWD_sName).opPlus(WDAPIChaine.caract(10)).opPlus("Shopper Surname: ").opPlus(vWD_sSurname).opPlus(WDAPIChaine.caract(10)).opPlus("Shopper Guid: ").opPlus(vWD_sGuid).opPlus(WDAPIChaine.caract(10)).opPlus("Shopper Cashback: ").opPlus(vWD_nCashback).opPlus(WDAPIChaine.caract(10)).opPlus("is blacklisted: ").opPlus(vWD_isBlackListed).opPlus(WDAPIChaine.caract(10)).opPlus("blacklist reason: ").opPlus(vWD_blackListedReason).opPlus(WDAPIChaine.caract(10)).opPlus("not linked to store: ").opPlus(vWD_isNotLinkedToStore));

}
else
{
// 		WIN_NFC.STC_CardDetails = "No user found."
GWDPTS_Broadcast.getInstance().getWIN_NFC().mWD_STC_CardDetails.setValeur("No user found.");

}

}

// result false
return new WDBooleen(false);

}
finally
{
finExecProcGlobale();
}

}



public static boolean CheckPromotions(String data)
{
	String TAG = "CheckPromotions";
	Context context = getApplicationContext();
	try{
		JSONObject enquiry = new JSONObject(data);
		String guid = enquiry.getString("sGuid");
		
		//Temp lists
		List<String>  _barcodes = new ArrayList<String>();
		List<String>  _guids = new ArrayList<String>();
		List<Integer> _quantity = new ArrayList<Integer>();
		
		JSONArray barcodes = enquiry.getJSONArray("arrBarcodes");
		JSONArray guids = enquiry.getJSONArray("arrGuids");
		JSONArray quantities = enquiry.getJSONArray("arrQuantities");
		
		//fill temps
		for (int i = 0; i < barcodes.length(); i++) {
			_barcodes.add(barcodes.getString(i));
		}
		
		for (int i = 0; i < guids.length(); i++) {
			_guids.add(guids.getString(i));
		}
		
		for (int i = 0; i < quantities.length(); i++) {
			_quantity.add(quantities.getInt(i));
		}
				
		//pass to intent
		TouchsidesIntentServiceAPI.checkPromotions(context, guid, _barcodes, _guids, _quantity);
	} catch(JSONException e) {
		Log.e(TAG, "Json parsing error: " + e.getMessage());
	} 	
	
	Toast.makeText(getApplicationContext(), "", Toast.LENGTH_SHORT).show();
	return false;
}
static public WDObjet fWD_checkPromotionResult( WDObjet vWD_bHasReward , WDObjet vWD_nITotalDiscount , WDObjet vWD_nITotalAirtme , WDObjet vWD_nITotalData , WDObjet vWD_nITotalCashback , WDObjet vWD_nITotalBetway , WDObjet vWD_arrFreeBarcodes , WDObjet vWD_arrReminderMessages )
{
ms_instance.initExecProcGlobale("CheckPromotionResult");

try
{
vWD_bHasReward = WDParametre.traiterParametre(vWD_bHasReward, 1, false, 1);

vWD_nITotalDiscount = WDParametre.traiterParametre(vWD_nITotalDiscount, 2, false, 8);

vWD_nITotalAirtme = WDParametre.traiterParametre(vWD_nITotalAirtme, 3, false, 8);

vWD_nITotalData = WDParametre.traiterParametre(vWD_nITotalData, 4, false, 8);

vWD_nITotalCashback = WDParametre.traiterParametre(vWD_nITotalCashback, 5, false, 8);

vWD_nITotalBetway = WDParametre.traiterParametre(vWD_nITotalBetway, 6, false, 8);

vWD_arrFreeBarcodes = WDParametre.traiterParametreTableau(vWD_arrFreeBarcodes, 7, false, new int[]{0}, 16, null);

vWD_arrReminderMessages = WDParametre.traiterParametreTableau(vWD_arrReminderMessages, 8, false, new int[]{0}, 16, null);


// result false
return new WDBooleen(false);

}
finally
{
finExecProcGlobale();
}

}



////////////////////////////////////////////////////////////////////////////
// Déclaration des variables globales
////////////////////////////////////////////////////////////////////////////
}
